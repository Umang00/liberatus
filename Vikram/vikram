import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { DollarSign, AlertCircle } from "lucide-react";

// Hardcoded ad account IDs for the dropdown
const AD_ACCOUNTS = [
  { id: "act_123456789", name: "Main Campaign Account" },
  { id: "act_987654321", name: "Test Account" },
  { id: "act_456789123", name: "Q4 Campaigns" },
  { id: "act_789123456", name: "Brand Awareness" },
  { id: "act_321654987", name: "Retargeting" },
];

const Index = () => {
  const [selectedAccount, setSelectedAccount] = useState<string>("");
  const [balance, setBalance] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleFetchBalance = async () => {
    if (!selectedAccount) {
      setError("Please select an ad account");
      return;
    }

    setLoading(true);
    setError(null);
    setBalance(null);

    // Simulate API call (replace with actual n8n webhook endpoint)
    try {
      // TODO: Replace with actual n8n webhook URL
      // const response = await fetch('YOUR_N8N_WEBHOOK_URL', {
      //   method: 'POST',
      //   headers: { 'Content-Type': 'application/json' },
      //   body: JSON.stringify({ ad_account_id: selectedAccount })
      // });

      // Simulated delay
      await new Promise((resolve) => setTimeout(resolve, 1500));

      // Mock response - remove this and uncomment above when integrating with backend
      const mockBalance = (Math.random() * 10000).toFixed(2);
      setBalance(mockBalance);
    } catch (err) {
      setError("Looks like Facebook API is down. Please try after 5 minutes");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-background p-6">
      <div className="max-w-2xl mx-auto space-y-6">
        {/* Header */}
        <div className="text-center space-y-2 pt-8">
          <h1 className="text-4xl font-bold text-foreground">Facebook Ad Account Balance Checker</h1>
          <p className="text-muted-foreground">
            Quickly check the available balance for your Facebook ad accounts
          </p>
        </div>

        {/* Main Card */}
        <Card className="shadow-lg">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <DollarSign className="h-5 w-5 text-primary" />
              Check Balance
            </CardTitle>
            <CardDescription>Select an ad account to view its current balance</CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Account Selection */}
            <div className="space-y-2">
              <label className="text-sm font-medium text-foreground">Ad Account</label>
              <Select value={selectedAccount} onValueChange={setSelectedAccount}>
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="Select an ad account" />
                </SelectTrigger>
                <SelectContent>
                  {AD_ACCOUNTS.map((account) => (
                    <SelectItem key={account.id} value={account.id}>
                      {account.name} ({account.id})
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {/* Fetch Button */}
            <Button
              onClick={handleFetchBalance}
              disabled={loading || !selectedAccount}
              className="w-full"
              size="lg"
            >
              {loading ? "Fetching Balance..." : "Fetch Balance"}
            </Button>

            {/* Error Display */}
            {error && (
              <Alert variant="destructive">
                <AlertCircle className="h-4 w-4" />
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}

            {/* Balance Display */}
            {balance && !error && (
              <Card className="bg-muted">
                <CardContent className="pt-6">
                  <div className="text-center space-y-2">
                    <p className="text-sm text-muted-foreground">Available Balance</p>
                    <p className="text-4xl font-bold text-success">
                      ${parseFloat(balance).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                    </p>
                    <p className="text-xs text-muted-foreground">USD</p>
                  </div>
                </CardContent>
              </Card>
            )}
          </CardContent>
        </Card>

        {/* Info Footer */}
        <div className="text-center text-sm text-muted-foreground">
          <p>This tool fetches real-time balance data from Facebook's Ad API</p>
        </div>
      </div>
    </div>
  );
};

export default Index;
