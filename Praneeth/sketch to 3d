# -*- coding: utf-8 -*-
"""Sketch to 3D Converter

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SDX1HEmlbeF9kbq4eT4nGga9gobcqSzU
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d.art3d import Poly3DCollection

def sketch_to_3d(image_path, extrusion_height=50):
    """
    Reads a 2D sketch, finds the largest contour, and extrudes it to create a 3D wireframe plot.

    Args:
        image_path (str): The file path to the input sketch image.
        extrusion_height (int): The height to extrude the 2D shape in the z-axis.
    """
    try:
        # 1. Read and Process the Image
        img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
        if img is None:
            print(f"Error: Could not read image from {image_path}")
            return

        # Invert the image (assuming black sketch on white background)
        # OpenCV's findContours finds white objects on a black background.
        img = cv2.bitwise_not(img)

        # Apply a threshold to get a binary image
        _, thresh = cv2.threshold(img, 128, 255, cv2.THRESH_BINARY)

        # 2. Find Contours
        contours, _ = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

        if not contours:
            print("No contours found in the image. Make sure it's a clean sketch.")
            return

        # Find the largest contour by area
        main_contour = max(contours, key=cv2.contourArea)

        # Simplify the contour to reduce the number of vertices
        # The epsilon value is a percentage of the arc length; adjust as needed.
        epsilon = 0.01 * cv2.arcLength(main_contour, True)
        approx_contour = cv2.approxPolyDP(main_contour, epsilon, True)

        # Squeeze the contour array to get a list of (x, y) points
        points_2d = approx_contour.squeeze()

        if len(points_2d) < 3:
            print("Contour is too simple to form a 3D shape (less than 3 vertices).")
            return

        # 3. Create 3D Vertices
        # Create the bottom face (z=0)
        verts_bottom = np.hstack([points_2d, np.zeros((len(points_2d), 1))])

        # Create the top face (z=extrusion_height)
        verts_top = np.hstack([points_2d, np.full((len(points_2d), 1), extrusion_height)])

        # Combine all vertices
        all_verts = np.vstack([verts_bottom, verts_top])

        # 4. Define the Faces of the 3D Shape
        faces = []
        # Bottom face
        faces.append(list(range(len(verts_bottom))))
        # Top face
        faces.append(list(range(len(verts_bottom), len(all_verts))))

        # Side faces
        for i in range(len(points_2d)):
            next_i = (i + 1) % len(points_2d)
            # Each side face is a quad connecting two bottom vertices to two top vertices
            face = [i, next_i, next_i + len(points_2d), i + len(points_2d)]
            faces.append(face)

        # 5. Plot the 3D Object
        fig = plt.figure(figsize=(10, 8))
        ax = fig.add_subplot(111, projection='3d')

        # Create a Poly3DCollection
        poly3d = Poly3DCollection(
            [all_verts[face] for face in faces],
            edgecolors='k',  # Wireframe color
            facecolors='cyan',
            linewidths=1,
            alpha=0.25 # Transparency
        )

        ax.add_collection3d(poly3d)

        # Set plot limits and labels
        ax.set_xlabel('X')
        ax.set_ylabel('Y')
        ax.set_zlabel('Z')

        # Auto-scale axes to fit the object
        max_range = np.array([all_verts[:,0].max()-all_verts[:,0].min(),
                              all_verts[:,1].max()-all_verts[:,1].min(),
                              all_verts[:,2].max()-all_verts[:,2].min()]).max()
        mid_x = (all_verts[:,0].max()+all_verts[:,0].min()) * 0.5
        mid_y = (all_verts[:,1].max()+all_verts[:,1].min()) * 0.5
        mid_z = (all_verts[:,2].max()+all_verts[:,2].min()) * 0.5
        ax.set_xlim(mid_x - max_range, mid_x + max_range)
        ax.set_ylim(mid_y - max_range, mid_y + max_range)
        ax.set_zlim(mid_z - max_range, mid_z + max_range)

        ax.set_title('3D Render from Sketch')
        plt.show()

    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == '__main__':
    # --- IMPORTANT ---
    # Create an image file named 'my_sketch.png' in the same directory.
    # Use a simple, single, closed shape (e.g., a star, a simple house outline).
    # The sketch should be black lines on a plain white background.

    # Example usage:
    image_file = 'my_sketch.png'
    print(f"Attempting to process '{image_file}'...")
    print("Please ensure you have created this file and it contains a simple sketch.")
    sketch_to_3d(image_file, extrusion_height=100)
